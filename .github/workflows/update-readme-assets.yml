name: Update README Assets

on:
  # Run on pushes to main
  push:
    branches: [ main ]
    paths:
      - '**.kt'
      - '**.xml'
      - 'gradle/**'
      - '**.gradle'
  
  # Run on workflow dispatch
  workflow_dispatch:

  # Run on a schedule (weekly)
  schedule:
    - cron: '0 0 * * 0'  # At 00:00 on Sunday

# Permissions needed for GitHub token
permissions:
  contents: write    # For committing to the repository
  pull-requests: write  # For creating PRs

jobs:
  generate-assets:
    runs-on: ubuntu-latest
    
    steps:
      # Check out the repo
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Set up JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      # Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        
      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # Build debug APK
      - name: Build debug APK
        run: ./gradlew assembleDebug
      
      # Build test APK
      - name: Build test APK
        run: ./gradlew assembleDebugAndroidTest

      # Run tests using Android Emulator
      - name: Run Screenshot Tests on Emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30 # Match API level used previously
          # Target only the screenshot test class
          script: ./gradlew connectedCheck -Pandroid.testInstrumentationRunnerArguments.class=dev.broken.app.vibe.EspressoScreenshotTest
      
      # Process the screenshots generated by the emulator
      - name: Process assets
        run: |
          # Create assets directory in the repo
          mkdir -p assets/screenshots
          
          # Create a timestamp for versioning
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          # Process and rename screenshots from emulator results
          echo "Processing screenshots..."
          
          # Define the source directory for screenshots from connectedCheck
          # The path usually includes device/emulator specific subdirectories
          SCREENSHOT_SOURCE_DIR="app/build/outputs/androidTest-results/connected/"
          
          # Check if the directory exists
          if [ ! -d "$SCREENSHOT_SOURCE_DIR" ]; then
            echo "ERROR: Screenshot source directory not found: $SCREENSHOT_SOURCE_DIR"
            echo "SCREENSHOTS_MISSING=true" >> $GITHUB_ENV
            exit 0 # Exit script, no assets to process
          fi
          
          # Find all PNG files within the source directory (likely in subdirs)
          # Example filename: dev.broken.app.vibe.EspressoScreenshotTest-main_screen_default.png
          SCREENSHOT_FILES=$(find "$SCREENSHOT_SOURCE_DIR" -type f -name "*.png")
          
          if [ -z "$SCREENSHOT_FILES" ]; then
            echo "WARNING: No PNG files found in $SCREENSHOT_SOURCE_DIR"
            echo "SCREENSHOTS_MISSING=true" >> $GITHUB_ENV
            exit 0 # Exit script, no assets to process
          fi
          
          # Initialize variables to track if we've found each type of screenshot
          found_default=false
          found_running=false
          found_20min=false
          
          # Use filename patterns to identify screenshots
          echo "$SCREENSHOT_FILES" | while read file; do
            echo "Found screenshot: $file"
            # Extract the base filename
            BASENAME=$(basename "$file")
            
            # Try to identify based on test method name in filename
            if [[ "$BASENAME" == *"EspressoScreenshotTest-main_screen_default"* ]]; then
              cp "$file" "./assets/screenshots/main_screen_default_${TIMESTAMP}.png"
              found_default=true
              echo "Identified as main screen default"
            elif [[ "$BASENAME" == *"EspressoScreenshotTest-main_screen_timer_running"* ]]; then
              cp "$file" "./assets/screenshots/main_screen_timer_running_${TIMESTAMP}.png"
              found_running=true
              echo "Identified as timer running screen"
            elif [[ "$BASENAME" == *"EspressoScreenshotTest-main_screen_20min"* ]]; then
              cp "$file" "./assets/screenshots/main_screen_20min_${TIMESTAMP}.png"
              found_20min=true
              echo "Identified as 20min timer screen"
            else
              # Copy any other screenshots found with a generic name + timestamp
              cp "$file" "./assets/screenshots/${BASENAME%.png}_${TIMESTAMP}.png"
              echo "Saved as extra screenshot: ${BASENAME%.png}_${TIMESTAMP}.png"
            fi
          done
          
          # Check if we're missing any expected screenshots
          if [[ "$found_default" == "false" || "$found_running" == "false" || "$found_20min" == "false" ]]; then
            echo "WARNING: Some expected screenshots were not found!"
            echo "Screenshots found: default=$found_default, running=$found_running, 20min=$found_20min"
            echo "SCREENSHOTS_MISSING=true" >> $GITHUB_ENV
          else
            echo "All expected screenshots were found successfully."
            echo "SCREENSHOTS_MISSING=false" >> $GITHUB_ENV
          fi
          
          # List all processed screenshots
          echo "Processed screenshots:"
          find ./assets/screenshots -type f | sort
          
          # Video processing removed
      
      # Update the README with the new assets (screenshots only)
      - name: Update README
        run: |
          # Create readme_updated.md as a copy of the original
          cp README.md readme_updated.md
          
          # Create latest symlinks for consistent paths
          echo "Creating latest links for screenshots..."
          for TYPE in main_screen_default main_screen_timer_running main_screen_20min; do
            LATEST=$(find ./assets/screenshots -name "${TYPE}_*.png" | sort -r | head -n 1)
            if [ -n "$LATEST" ]; then
              # Check if source and destination are different to avoid cp error
              DEST="./assets/screenshots/${TYPE}_latest.png"
              if [ "$LATEST" != "$DEST" ]; then
                echo "Setting $TYPE latest to: $LATEST"
                cp "$LATEST" "$DEST"
              else
                echo "$TYPE latest is already set to the most recent version"
              fi
            fi
          done
          
          # Check if we have the screenshots section already
          if grep -q "## Screenshots" readme_updated.md; then
            # Replace the existing screenshots section, stopping before the next heading (e.g., ## Download)
            # This regex removes the old screenshot block and the (now removed) App Demo block
            sed -i '/## Screenshots/,/## [A-Za-z]*/ { /## Screenshots/! { /## [A-Za-z]*/! d; }; }' readme_updated.md
            # Insert the new screenshot block
            sed -i '/## Screenshots/a \\n<div align="center">\n  <img src="assets/screenshots/main_screen_default_latest.png" width="280" alt="Default Screen" />\n  <img src="assets/screenshots/main_screen_timer_running_latest.png" width="280" alt="Timer Running" />\n  <img src="assets/screenshots/main_screen_20min_latest.png" width="280" alt="20 Minute Timer" />\n</div>\n' readme_updated.md
          else
            # Add the screenshots section before "Download" if it doesn't exist
            sed -i '/## Download/i ## Screenshots\n\n<div align="center">\n  <img src="assets/screenshots/main_screen_default_latest.png" width="280" alt="Default Screen" />\n  <img src="assets/screenshots/main_screen_timer_running_latest.png" width="280" alt="Timer Running" />\n  <img src="assets/screenshots/main_screen_20min_latest.png" width="280" alt="20 Minute Timer" />\n</div>\n' readme_updated.md
          fi
          
          # Print differences for logging
          echo "README changes:"
          diff README.md readme_updated.md || true
          
          # Replace the original README
          mv readme_updated.md README.md
      
      # Ensure asset directories are included in the commit
      - name: Ensure asset directories exist
        run: |
          # Create .gitkeep files to ensure directories are tracked
          mkdir -p assets/screenshots
          # No longer need video directory
          # mkdir -p assets/videos
          touch assets/screenshots/.gitkeep
          # touch assets/videos/.gitkeep
      
      # Create a branch and PR with the updated assets (screenshots only)
      - name: Create PR with updated assets
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Set Git user
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Get current date and time for branch name to ensure uniqueness
          DATETIME=$(date +'%Y%m%d-%H%M%S')
          BRANCH_NAME="update-readme-assets-${DATETIME}"
          
          # Check if screenshots are missing before proceeding
          if [[ "$SCREENSHOTS_MISSING" == "true" ]]; then
            echo "Screenshots are missing. Creating an issue instead of a PR with incomplete assets."
            
            # Create the issue with appropriate content
            ISSUE_TITLE="README screenshot update failed"
            ISSUE_BODY="The automated README assets update workflow ran, but failed to find all required screenshots.\n\n"
            ISSUE_BODY+="### Missing Screenshots\n"
            ISSUE_BODY+="The following screenshots could not be found in the Android emulator test results:\n"
            # Note: The 'found_*' variables are not available here, need to check logs
            ISSUE_BODY+="- Check workflow logs for details on which screenshots were missing.\n\n"

            ISSUE_BODY+="Please check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.\n"
            ISSUE_BODY+="This could be due to:\n"
            ISSUE_BODY+="1. Test failures on the emulator\n"
            ISSUE_BODY+="2. Emulator configuration issues\n"
            ISSUE_BODY+="3. Screenshot capture code not working properly\n\n"
            ISSUE_BODY+="No changes were made to the README to avoid using incorrect or missing screenshots.\n"
            
            # Create the issue using the environment variables
            gh issue create --title "$ISSUE_TITLE" --body "$ISSUE_BODY"
            
            echo "Created issue instead of PR due to missing assets"
            exit 0
          fi
          
          # Check if we have changes to commit (only screenshots and README)
          if [[ -z "$(git status --porcelain assets/screenshots/ README.md)" ]]; then
            echo "No changes to screenshots or README. Skipping PR creation."
            exit 0
          fi
          
          # Create a new branch
          git checkout -b $BRANCH_NAME
          
          # Add and commit changes (assets/screenshots and README.md)
          git add assets/screenshots/ README.md
          git commit -m "Update README screenshots [skip ci]"
          
          # Push the branch
          git push -u origin $BRANCH_NAME
          
          # Check if a PR already exists for this branch
          existing_pr=$(gh pr list --head $BRANCH_NAME --json number -q '.[0].number')
          if [[ -n "$existing_pr" ]]; then
            echo "PR #$existing_pr already exists for branch $BRANCH_NAME. Skipping PR creation."
            exit 0
          fi
          
          # Create a PR
          gh pr create --title "Update README screenshots" \
            --body "## Auto-generated README Assets Update
            
            This PR updates the screenshots in the README to reflect the current state of the app based on emulator tests.
            
            ### Changes:
            - Updated app screenshots from Android emulator tests
            - Removed App Demo section (video generation is no longer supported)
            - Updated README references
            
            This PR was automatically generated by the update-readme-assets workflow.
            " \
            --base main \
            --head $BRANCH_NAME