name: Android CI

on:
  # Always run on pushes to main (these are trusted by definition)
  push:
    branches: [ main ]
  
  # For pull requests, use conditional execution
  pull_request:
    branches: [ main ]
    
  # Allow manual trigger
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages and releases
permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  # Job to check if CI should run
  ci-security-check:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
    steps:
      - id: check
        name: Check if CI should run
        run: |
          # Always run for pushes to main branch
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "CI running for push to main branch"
            echo "should-run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Always run for workflow_dispatch events (manual trigger)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "CI running for manual workflow trigger"
            echo "should-run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For PRs, check for 'run-ci' label or organization membership
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Check if PR has 'run-ci' label
            HAS_LABEL=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" | \
              grep -q "\"name\": *\"run-ci\"" && echo "true" || echo "false")
            
            # Check if PR author is org member or collaborator
            IS_COLLABORATOR=$(curl -s -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.event.pull_request.user.login }}" \
              -o /dev/null -w "%{http_code}")
            
            if [[ "$HAS_LABEL" == "true" || "$IS_COLLABORATOR" == "204" ]]; then
              echo "CI running for PR by org member or with run-ci label"
              echo "should-run=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "CI skipped: PR lacks 'run-ci' label and author is not a collaborator"
              echo "should-run=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # Default fallback - don't run
          echo "CI skipped: Conditions not met"
          echo "should-run=false" >> $GITHUB_OUTPUT

  # Skip notification job (runs when CI is skipped)
  skipped-notification:
    needs: ci-security-check
    if: needs.ci-security-check.outputs.should-run == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip reason
        run: |
          echo "::notice::Android CI skipped: This PR requires a 'run-ci' label to be applied by a maintainer before CI will run."
          echo "::notice::This is a security measure to prevent unauthorized CI usage."
      
      # Add a PR comment explaining the skip if this is a PR
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        run: |
          MESSAGE="## ðŸ›‘ CI Check Skipped\n\nAndroid CI build was not run because this pull request does not have the \`run-ci\` label.\n\nThis is a security measure to prevent unauthorized CI usage. Please ask a repository maintainer to add the \`run-ci\` label if you want to run CI."
          
          curl -s -X POST \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": \"$MESSAGE\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

  # Main build job, depends on security check
  build:
    needs: ci-security-check
    # Only run if the check passed
    if: needs.ci-security-check.outputs.should-run == 'true'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Decode google-services.json
      env:
        GOOGLE_SERVICES_JSON_B64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
      run: |
        echo $GOOGLE_SERVICES_JSON_B64 | base64 --decode > app/google-services.json
        echo "google-services.json created successfully."

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # Build the actual app
    - name: Build with Gradle
      run: ./gradlew build
    
    - name: Run Tests
      run: ./gradlew test
     
    - name: Build Debug APK
      run: ./gradlew assembleDebug
    
    - name: Generate version name
      id: version
      run: echo "version=$(date +'%Y%m%d%H%M')" >> $GITHUB_OUTPUT
    
    - name: Upload APK to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vibe-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
    
    # Add PR comment with download link for pull requests
    - name: Find PR Comment
      if: github.event_name == 'pull_request'
      uses: peter-evans/find-comment@v3
      id: fc
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: APK for testing
    
    - name: Create or update PR comment with APK link
      if: github.event_name == 'pull_request'
      uses: peter-evans/create-or-update-comment@v3
      with:
        comment-id: ${{ steps.fc.outputs.comment-id }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## APK for testing
          
          :robot: This automated comment was updated by GitHub Actions.
          
          âœ… [Download the APK for this PR](https://github.com/patflynn/vibe/actions/runs/${{ github.run_id }})
          
          To test:
          1. Click the link above
          2. Click on the "Artifacts" dropdown section
          3. Download the APK artifact
          4. Install on your device and test the changes
          
          _Build completed at: ${{ steps.version.outputs.version }}_
        edit-mode: replace
    
    # Only create release for pushes to main branch, not for pull requests
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Vibe Build ${{ steps.version.outputs.version }}
        files: app/build/outputs/apk/debug/app-debug.apk
        body: |
          ## Vibe Android App Release v${{ steps.version.outputs.version }}
          
          ### What's in this release:
          - Latest changes from the main branch
          - APK ready for testing on Android devices
          
          Download the APK and install on your device to test the latest features!
        generate_release_notes: true