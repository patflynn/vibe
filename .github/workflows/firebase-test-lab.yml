name: Firebase Test Lab Integration

on:
  # Always run on pushes to main (these are trusted by definition)
  push:
    branches: [ main ]
  
  # For pull requests, use conditional execution
  pull_request:
    branches: [ main ]
    
  # Allow manual trigger
  workflow_dispatch:

jobs:
  # Job to check if CI should run
  ci-security-check:
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      is-code-change: ${{ steps.path-filter.outputs.is-code-change }}
    steps:
      # Check file paths to see if we need to run tests
      - uses: actions/checkout@v3
      
      - id: path-filter
        name: Check if code files were changed
        run: |
          # Get changed files
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PR, get changed files from the event
            CHANGED_FILES=$(curl -s -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
              | jq -r '.[].filename')
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # For push, get changed files from git
            git fetch origin main
            CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          else
            # For manual trigger, assume code changes
            echo "Manual trigger - assuming code changes"
            echo "is-code-change=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if there are code changes that require testing
          if echo "$CHANGED_FILES" | grep -q -E '\.kt$|\.xml$|\.gradle$|\.java$|\.properties$'; then
            echo "Code files changed, running Firebase Test Lab"
            echo "is-code-change=true" >> $GITHUB_OUTPUT
          else
            echo "Only non-code files changed, skipping Firebase Test Lab"
            echo "is-code-change=false" >> $GITHUB_OUTPUT
          fi
      
      - id: check
        name: Check if CI should run
        run: |
          # Always run for pushes to main branch
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "CI running for push to main branch"
            echo "should-run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Always run for workflow_dispatch events (manual trigger)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "CI running for manual workflow trigger"
            echo "should-run=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # For PRs, check for 'run-ci' label or organization membership
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Check if PR has 'run-ci' label
            HAS_LABEL=$(curl -s -H "Authorization: token ${{ github.token }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels" | \
              grep -q "\"name\": *\"run-ci\"" && echo "true" || echo "false")
            
            # Check if PR author is org member or collaborator
            IS_COLLABORATOR=$(curl -s -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.event.pull_request.user.login }}" \
              -o /dev/null -w "%{http_code}")
            
            if [[ "$HAS_LABEL" == "true" || "$IS_COLLABORATOR" == "204" ]]; then
              echo "CI running for PR by org member or with run-ci label"
              echo "should-run=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "CI skipped: PR lacks 'run-ci' label and author is not a collaborator"
              echo "should-run=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # Default fallback - don't run
          echo "CI skipped: Conditions not met"
          echo "should-run=false" >> $GITHUB_OUTPUT

  # Skip notification job (runs when CI is skipped)
  skipped-notification:
    needs: ci-security-check
    if: needs.ci-security-check.outputs.should-run == 'false' || needs.ci-security-check.outputs.is-code-change == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Skip reason
        run: |
          if [[ "${{ needs.ci-security-check.outputs.should-run }}" == "false" ]]; then
            echo "::notice::Firebase Test Lab CI skipped: This PR requires a 'run-ci' label to be applied by a maintainer before CI will run."
            echo "::notice::This is a security measure to prevent unauthorized CI usage."
          else
            echo "::notice::Firebase Test Lab CI skipped: No code changes detected that require testing."
            echo "::notice::Only documentation or non-code files were changed."
          fi
      
      # Add a PR comment explaining the skip if this is a PR
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        run: |
          if [[ "${{ needs.ci-security-check.outputs.should-run }}" == "false" ]]; then
            MESSAGE="## 🛑 CI Check Skipped\n\nFirebase Test Lab tests were not run because this pull request does not have the \`run-ci\` label.\n\nThis is a security measure to prevent unauthorized CI usage. Please ask a repository maintainer to add the \`run-ci\` label if you want to run tests."
          else
            MESSAGE="## ⏩ CI Check Skipped\n\nFirebase Test Lab tests were not run because no code changes were detected.\n\nOnly documentation or non-code files were changed, so tests are not necessary."
          fi
          
          curl -s -X POST \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": \"$MESSAGE\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"

  # Main test job, depends on security check
  instrumentation-test:
    needs: ci-security-check
    # Only run if security check passes AND we have code changes
    if: needs.ci-security-check.outputs.should-run == 'true' && needs.ci-security-check.outputs.is-code-change == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON_B64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
        run: |
          echo $GOOGLE_SERVICES_JSON_B64 | base64 --decode > app/google-services.json
          echo "google-services.json created successfully."

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build debug APK and test APK
        run: ./gradlew assembleDebug assembleDebugAndroidTest

      # Authentication with Google Cloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          project_id: '${{ secrets.FIREBASE_PROJECT_ID }}'

      # Setup Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Run instrumentation tests in Firebase Test Lab
        run: |
          # List available device models first for debugging
          echo "Available device models:"
          gcloud firebase test android models list --format="value(MODEL_ID)" | grep -i pixel
          
          # Run tests with newer devices that support minSdkVersion 30+
          RESULTS_DIR="github-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER"
          echo "Using results directory: $RESULTS_DIR"
          
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/debug/app-debug.apk \
            --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=redfin,version=30,locale=en,orientation=portrait \
            --device model=oriole,version=31,locale=en,orientation=portrait \
            --device model=panther,version=33,locale=en,orientation=portrait \
            --results-bucket gs://${{ secrets.FIREBASE_TEST_BUCKET }} \
            --results-dir=$RESULTS_DIR
            
          # Save the results dir for the next step
          echo "RESULTS_DIR=$RESULTS_DIR" >> $GITHUB_ENV

      - name: Download test results
        if: always()
        run: |
          mkdir -p firebase-test-results
          echo "Attempting to download test results from GCS bucket..."
          # Try to list files in the bucket first to understand what's available
          gsutil ls gs://${{ secrets.FIREBASE_TEST_BUCKET }}/
          
          # List the latest directories (newest first)
          echo "Latest directories in bucket:"
          gsutil ls -l gs://${{ secrets.FIREBASE_TEST_BUCKET }}/ | sort -r | head -10
          
          # Try to download files from the expected location using the saved RESULTS_DIR
          echo "Downloading from gs://${{ secrets.FIREBASE_TEST_BUCKET }}/$RESULTS_DIR/*"
          gsutil -m cp -r gs://${{ secrets.FIREBASE_TEST_BUCKET }}/$RESULTS_DIR/* firebase-test-results/ || echo "No files found in expected location, continuing workflow"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: firebase-test-results
          path: firebase-test-results
          if-no-files-found: warn