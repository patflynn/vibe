name: Firebase Test Lab Integration

on:
  # Only run during release preparation (manual trigger)
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Type of release being prepared'
        required: true
        default: 'testing'
        type: choice
        options:
          - testing
          - production
  
  # Allow calling from other workflows
  workflow_call:
    inputs:
      releaseType:
        description: 'Type of release being prepared'
        type: string
        default: 'testing'
        required: true

jobs:
  # Call the reusable security check workflow with file path checking enabled
  security-check:
    uses: ./.github/workflows/ci-security-check.yml
    with:
      check-file-changes: true
      file-patterns: '\.kt$|\.xml$|\.gradle$|\.java$|\.properties$'
  
  # Call the reusable notification workflow if CI should be skipped due to security check
  notify-security-skip:
    needs: security-check
    if: needs.security-check.outputs.should-run == 'false'
    uses: ./.github/workflows/ci-skipped-notification.yml
    with:
      workflow-name: 'Firebase Test Lab'
      security-check: true
  
  # Call the reusable notification workflow if CI should be skipped due to no code changes
  notify-no-code-changes:
    needs: security-check
    if: needs.security-check.outputs.should-run == 'true' && needs.security-check.outputs.is-code-change == 'false'
    uses: ./.github/workflows/ci-skipped-notification.yml
    with:
      workflow-name: 'Firebase Test Lab'
      security-check: false
      code-change-check: true
  
  # Main test job, depends on security check
  instrumentation-test:
    needs: security-check
    # Only run if security check passes (no need to check code changes for releases)
    if: needs.security-check.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    env:
      RELEASE_TYPE: ${{ inputs.releaseType }}
    steps:
      - uses: actions/checkout@v3

      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON_B64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
        run: |
          echo $GOOGLE_SERVICES_JSON_B64 | base64 --decode > app/google-services.json
          echo "google-services.json created successfully."

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Add explicit dependency for screenshot testing
      - name: Update build.gradle with Espresso screenshot dependencies
        run: |
          # Add the espresso-core dependency with screenshot support
          sed -i '/androidTestImplementation .androidx.test.espresso:espresso-core.*/s/.*/    androidTestImplementation "androidx.test.espresso:espresso-core:3.6.1"\n    androidTestImplementation "androidx.test.espresso:espresso-core:3.6.1:screencapture"/' app/build.gradle

      - name: Build debug APK and test APK
        run: ./gradlew assembleDebug assembleDebugAndroidTest

      # Authentication with Google Cloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          project_id: '${{ secrets.FIREBASE_PROJECT_ID }}'

      # Setup Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.FIREBASE_PROJECT_ID }}

      - name: Run instrumentation tests in Firebase Test Lab
        run: |
          # Display release type being tested
          echo "Running Firebase Test Lab tests for $RELEASE_TYPE release preparation"
          
          # List available device models first for debugging
          echo "Available device models:"
          gcloud firebase test android models list --format="value(MODEL_ID)" | grep -i pixel
          
          # Run tests with newer devices that support minSdkVersion 30+
          RESULTS_DIR="github-$RELEASE_TYPE-$GITHUB_RUN_ID-$GITHUB_RUN_NUMBER"
          echo "Using results directory: $RESULTS_DIR"
          
          gcloud firebase test android run \
            --type instrumentation \
            --app app/build/outputs/apk/debug/app-debug.apk \
            --test app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
            --device model=redfin,version=30,locale=en,orientation=portrait \
            --device model=oriole,version=31,locale=en,orientation=portrait \
            --device model=panther,version=33,locale=en,orientation=portrait \
            --results-bucket gs://${{ secrets.FIREBASE_TEST_BUCKET }} \
            --results-dir=$RESULTS_DIR \
            --test-targets "class dev.broken.app.vibe.EspressoScreenshotTest"
            
          # Save the results dir for the next step
          echo "RESULTS_DIR=$RESULTS_DIR" >> $GITHUB_ENV

      - name: Download test results
        if: always()
        run: |
          mkdir -p firebase-test-results
          echo "Attempting to download test results from GCS bucket..."
          # Try to list files in the bucket first to understand what's available
          gsutil ls gs://${{ secrets.FIREBASE_TEST_BUCKET }}/
          
          # List the latest directories (newest first)
          echo "Latest directories in bucket:"
          gsutil ls -l gs://${{ secrets.FIREBASE_TEST_BUCKET }}/ | sort -r | head -10
          
          # Try to download files from the expected location using the saved RESULTS_DIR
          echo "Downloading from gs://${{ secrets.FIREBASE_TEST_BUCKET }}/$RESULTS_DIR/*"
          gsutil -m cp -r gs://${{ secrets.FIREBASE_TEST_BUCKET }}/$RESULTS_DIR/* firebase-test-results/ || echo "No files found in expected location, continuing workflow"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: firebase-test-results
          path: firebase-test-results
          if-no-files-found: warn