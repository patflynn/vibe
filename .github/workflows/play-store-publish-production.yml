name: Play Store Production Release

on:
  # Manual trigger with version parameters
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Version name (e.g., 1.0.1)'
        required: true
      versionCode:
        description: 'Version code (integer)'
        required: true
      userFraction:
        description: 'User fraction for staged rollout (e.g., 0.1 for 10%)'
        required: true
        default: '0.1'
      releaseNotes:
        description: 'Release notes (markdown)'
        required: true

# Reuse CI security check for added protection
jobs:
  security-check:
    uses: ./.github/workflows/ci-security-check.yml
  
  publish:
    needs: security-check
    # Only run if security check passes
    if: needs.security-check.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    # Required for OIDC authentication with Google Cloud
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Set up JDK for building
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      # Decode Google Services config
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON_B64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
        run: |
          echo $GOOGLE_SERVICES_JSON_B64 | base64 --decode > app/google-services.json
          echo "google-services.json created successfully."
      
      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # Set version values
      - name: Set version values
        id: version
        run: |
          echo "VERSION_NAME=${{ github.event.inputs.versionName }}" >> $GITHUB_ENV
          echo "VERSION_CODE=${{ github.event.inputs.versionCode }}" >> $GITHUB_ENV
          # Convert userFraction to numeric value
          NUMERIC_FRACTION=$(echo "${{ github.event.inputs.userFraction }}" | bc)
          # Calculate percentage for display
          PERCENTAGE=$(echo "$NUMERIC_FRACTION * 100" | bc)
          echo "USER_FRACTION=$NUMERIC_FRACTION" >> $GITHUB_ENV
          echo "PERCENTAGE=$PERCENTAGE" >> $GITHUB_ENV
          
          # Determine status based on fraction
          if (( $(echo "$NUMERIC_FRACTION < 0.999" | bc -l) )); then
            echo "RELEASE_STATUS=inProgress" >> $GITHUB_ENV
          else
            echo "RELEASE_STATUS=completed" >> $GITHUB_ENV
          fi
      
      # Update version in build.gradle
      - name: Update version in build.gradle
        run: |
          sed -i "s/versionCode .*/versionCode ${{ env.VERSION_CODE }}/" app/build.gradle
          sed -i "s/versionName \".*\"/versionName \"${{ env.VERSION_NAME }}\"/" app/build.gradle
          cat app/build.gradle | grep -A 2 "versionCode"
      
      # Decode signing key
      - name: Decode Android signing key
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          echo $SIGNING_KEY | base64 -d > keystore.jks
          echo "KEYSTORE_FILE=$PWD/keystore.jks" >> $GITHUB_ENV
          echo "Keystore decoded successfully."
      
      # Build Release APK
      - name: Build Release APK
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        run: |
          ./gradlew :app:bundleRelease -PversionCode=${{ env.VERSION_CODE }} -PversionName=${{ env.VERSION_NAME }}
      
      # Sign the app bundle
      - name: Sign App Bundle
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      
      # Generate release notes file
      - name: Create release notes file
        run: |
          mkdir -p app/src/main/play/release-notes/en-US
          echo "${{ github.event.inputs.releaseNotes }}" > app/src/main/play/release-notes/en-US/default.txt
      
      # Authenticate to Google Cloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/742277119072/locations/global/workloadIdentityPools/github-workflows/providers/github-pool'
          service_account: 'github-actions-play-publisher@broken-vibe.iam.gserviceaccount.com'

      # Upload to Play Store
      - name: Upload to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ steps.auth.outputs.credentials_file_path }}
          packageName: dev.broken.app.vibe
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          track: production
          userFraction: ${{ env.USER_FRACTION }}
          status: ${{ env.RELEASE_STATUS }}
          releaseName: ${{ env.VERSION_NAME }}
          mappingFile: app/build/outputs/mapping/release/mapping.txt
          whatsNewDirectory: app/src/main/play/release-notes
        
      # Create GitHub release comment
      - name: Create success comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.inputs.issue_number || '' }}
          body: |
            ## ðŸš€ Play Store Production Deployment Success!
            
            Version **${{ env.VERSION_NAME }}** (code: ${{ env.VERSION_CODE }}) has been successfully uploaded to the **production** track.
            
            ${{ env.USER_FRACTION < 0.999 && format('This is a staged rollout to {0}% of users.', env.PERCENTAGE) || 'This is a full release to all users.' }}
            
            The app should be available to users soon. Check the Google Play Console for status updates.