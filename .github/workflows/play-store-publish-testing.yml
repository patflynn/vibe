name: Play Store Testing Tracks

on:
  # Manual trigger with version parameters
  workflow_dispatch:
    inputs:
      versionName:
        description: 'Version name (e.g., 1.0.1)'
        required: true
      versionCode:
        description: 'Version code (integer)'
        required: true
      track:
        description: 'Testing track'
        required: true
        default: 'internal'
        type: choice
        options:
          - internal
          - alpha
          - beta
      releaseNotes:
        description: 'Release notes (markdown)'
        required: false
      
  # Triggered when a release is created with testing tag pattern
  release:
    types: [created]

# Reuse CI security check for added protection
jobs:
  security-check:
    uses: ./.github/workflows/ci-security-check.yml
  
  # Run instrumentation tests before publishing
  instrumentation-tests: # Renamed job
    needs: security-check
    if: needs.security-check.outputs.should-run == 'true'
    uses: ./.github/workflows/android-instrumentation-tests.yml # Updated path
    with:
      releaseType: 'testing'
    secrets: inherit
  
  publish:
    needs: [security-check, instrumentation-tests] # Updated dependency
    # Only run if security check passes and tests pass
    if: needs.security-check.outputs.should-run == 'true'
    runs-on: ubuntu-latest
    # Required for OIDC authentication with Google Cloud
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Set up JDK for building
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle
      
      # Decode Google Services config
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON_B64: ${{ secrets.GOOGLE_SERVICES_JSON_BASE64 }}
        run: |
          echo $GOOGLE_SERVICES_JSON_B64 | base64 --decode > app/google-services.json
          echo "google-services.json created successfully."
      
      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      
      # Set version from inputs or use tag value
      - name: Set version values
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "VERSION_NAME=${{ github.event.inputs.versionName }}" >> $GITHUB_ENV
            echo "VERSION_CODE=${{ github.event.inputs.versionCode }}" >> $GITHUB_ENV
            echo "TRACK=${{ github.event.inputs.track }}" >> $GITHUB_ENV
          else
            # Extract from GitHub release tag (assumes format vX.Y.Z or X.Y.Z)
            TAG_NAME="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION_NAME="${TAG_NAME#v}"
            
            # Generate version code from date (YYMMDDNN format)
            VERSION_CODE=$(date +'%y%m%d01')
            
            echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
            echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
            echo "TRACK=internal" >> $GITHUB_ENV  # Default to internal for auto releases
          fi
      
      # Update version in build.gradle
      - name: Update version in build.gradle
        run: |
          sed -i "s/versionCode .*/versionCode ${{ env.VERSION_CODE }}/" app/build.gradle
          sed -i "s/versionName \".*\"/versionName \"${{ env.VERSION_NAME }}\"/" app/build.gradle
          cat app/build.gradle | grep -A 2 "versionCode"
      
      # Decode signing key
      - name: Decode Android signing key
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          echo $SIGNING_KEY | base64 -d > keystore.jks
          echo "KEYSTORE_FILE=$PWD/keystore.jks" >> $GITHUB_ENV
          echo "Keystore decoded successfully."
      
      # Build Release APK
      - name: Build Release APK
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          SIGNING_KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
        run: |
          ./gradlew :app:bundleRelease -PversionCode=${{ env.VERSION_CODE }} -PversionName=${{ env.VERSION_NAME }}
      
      # Sign the app bundle
      - name: Sign App Bundle
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      
      # Generate release notes file
      - name: Create release notes file
        run: |
          mkdir -p app/src/main/play/release-notes/en-US
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.releaseNotes }}" ]]; then
            echo "${{ github.event.inputs.releaseNotes }}" > app/src/main/play/release-notes/en-US/default.txt
          elif [[ "${{ github.event_name }}" == "release" && -n "${{ github.event.release.body }}" ]]; then
            echo "${{ github.event.release.body }}" > app/src/main/play/release-notes/en-US/default.txt
          else
            echo "Testing version ${{ env.VERSION_NAME }}" > app/src/main/play/release-notes/en-US/default.txt
          fi
      
      # Authenticate to Google Cloud
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/742277119072/locations/global/workloadIdentityPools/github-workflows/providers/github-pool'
          service_account: 'github-actions-play-publisher@broken-vibe.iam.gserviceaccount.com'

      # Upload to Play Store
      - name: Upload to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ${{ steps.auth.outputs.credentials_file_path }}
          packageName: dev.broken.app.vibe
          releaseFiles: app/build/outputs/bundle/release/app-release.aab
          track: ${{ env.TRACK }}
          status: draft
          releaseName: ${{ env.VERSION_NAME }}
          mappingFile: app/build/outputs/mapping/release/mapping.txt
          whatsNewDirectory: app/src/main/play/release-notes
        
